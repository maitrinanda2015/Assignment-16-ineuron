1.Given an array, for each element find the value of the nearest element to the right which is having a frequency greater than that of the current element. If there does not exist an answer for a position, then make the value ‘-1’.

Input: a[] = [1, 1, 2, 3, 4, 2, 1]
Output : [-1, -1, 1, 2, 2, 1, -1]

Explanation:
Given array a[] = [1, 1, 2, 3, 4, 2, 1]
Frequency of each element is: 3, 3, 2, 1, 1, 2, 3

Lets calls Next Greater Frequency element as NGF
1. For element a[0] = 1 which has a frequency = 3,
   As it has frequency of 3 and no other next element
   has frequency more than 3 so  '-1'
2. For element a[1] = 1 it will be -1 same logic
   like a[0]
3. For element a[2] = 2 which has frequency = 2,
   NGF element is 1 at position = 6  with frequency
   of 3 > 2
4. For element a[3] = 3 which has frequency = 1,
   NGF element is 2 at position = 5 with frequency
   of 2 > 1
5. For element a[4] = 4 which has frequency = 1,
   NGF element is 2 at position = 5 with frequency
   of 2 > 1
6. For element a[5] = 2 which has frequency = 2,
   NGF element is 1 at position = 6 with frequency
   of 3 > 2
7. For element a[6] = 1 there is no element to its
   right, hence -1

Input : a[] = [1, 1, 1, 2, 2, 2, 2, 11, 3, 3]
Output : [2, 2, 2, -1, -1, -1, -1, 3, -1, -1]

import java.util.*;

public class NearestGreaterFrequency {
    public static int[] findNearestGreaterFrequency(int[] arr) {
        int n = arr.length;
        int[] result = new int[n];
        Map<Integer, Integer> frequencyMap = new HashMap<>();
        Stack<Integer> stack = new Stack<>();

        // First pass: Calculate frequencies of elements
        for (int num : arr) {
            frequencyMap.put(num, frequencyMap.getOrDefault(num, 0) + 1);
        }

        // Second pass: Find nearest greater frequency element
        for (int i = n - 1; i >= 0; i--) {
            while (!stack.isEmpty() && frequencyMap.get(arr[i]) >= frequencyMap.get(stack.peek())) {
                stack.pop();
            }

            result[i] = stack.isEmpty() ? -1 : stack.peek();
            stack.push(arr[i]);
        }

        return result;
    }

    public static void main(String[] args) {
        int[] arr1 = {1, 1, 2, 3, 4, 2, 1};
        int[] result1 = findNearestGreaterFrequency(arr1);
        System.out.println(Arrays.toString(result1));  // Output: [-1, -1, 1, 2, 2, 1, -1]

        int[] arr2 = {1, 1, 1, 2, 2, 2, 2, 11, 3, 3};
        int[] result2 = findNearestGreaterFrequency(arr2);
        System.out.println(Arrays.toString(result2));  // Output: [2, 2, 2, -1, -1, -1, -1, 3, -1, -1]
    }
}

2.Given a stack of integers, sort it in ascending order using another temporary stack.

Input : [34, 3, 31, 98, 92, 23]
Output : [3, 23, 31, 34, 92, 98]

Input : [3, 5, 1, 4, 2, 8]
Output : [1, 2, 3, 4, 5, 8]

import java.util.Stack;

public class SortStack {
    public static void sortStack(Stack<Integer> stack) {
        Stack<Integer> tempStack = new Stack<>();

        while (!stack.isEmpty()) {
            int temp = stack.pop();

            while (!tempStack.isEmpty() && tempStack.peek() > temp) {
                stack.push(tempStack.pop());
            }

            tempStack.push(temp);
        }

        // Copy elements from tempStack to stack to get the sorted stack
        while (!tempStack.isEmpty()) {
            stack.push(tempStack.pop());
        }
    }

    public static void main(String[] args) {
        Stack<Integer> stack1 = new Stack<>();
        stack1.push(34);
        stack1.push(3);
        stack1.push(31);
        stack1.push(98);
        stack1.push(92);
        stack1.push(23);
        System.out.println("Original Stack: " + stack1);
        sortStack(stack1);
        System.out.println("Sorted Stack: " + stack1);

        Stack<Integer> stack2 = new Stack<>();
        stack2.push(3);
        stack2.push(5);
        stack2.push(1);
        stack2.push(4);
        stack2.push(2);
        stack2.push(8);
        System.out.println("Original Stack: " + stack2);
        sortStack(stack2);
        System.out.println("Sorted Stack: " + stack2);
    }
}
3.Given a stack with push(), pop(), and empty() operations, The task is to delete the middle element of it without using any additional data structure.

Input  : Stack[] = [1, 2, 3, 4, 5]

Output : Stack[] = [1, 2, 4, 5]

Input  : Stack[] = [1, 2, 3, 4, 5, 6]

Output : Stack[] = [1, 2, 4, 5, 6]

ans-:
import java.util.Stack;

public class DeleteMiddleElement {
    public static void deleteMiddle(Stack<Integer> stack) {
        if (stack.isEmpty()) {
            return;
        }

        int size = stack.size();
        int middle = size / 2 + 1;

        deleteMiddleHelper(stack, middle);
    }

    private static void deleteMiddleHelper(Stack<Integer> stack, int middle) {
        if (middle == 1) {
            stack.pop();
            return;
        }

        int temp = stack.pop();
        deleteMiddleHelper(stack, middle - 1);
        stack.push(temp);
    }

    public static void main(String[] args) {
        Stack<Integer> stack1 = new Stack<>();
        stack1.push(1);
        stack1.push(2);
        stack1.push(3);
        stack1.push(4);
        stack1.push(5);
        System.out.println("Original Stack: " + stack1);
        deleteMiddle(stack1);
        System.out.println("Stack after deleting middle element: " + stack1);

        Stack<Integer> stack2 = new Stack<>();
        stack2.push(1);
        stack2.push(2);
        stack2.push(3);
        stack2.push(4);
        stack2.push(5);
        stack2.push(6);
        System.out.println("Original Stack: " + stack2);
        deleteMiddle(stack2);
        System.out.println("Stack after deleting middle element: " + stack2);
    }
}
4.Given a Queue consisting of first **n** natural numbers (in random order). The task is to check whether the given Queue elements can be arranged in increasing order in another Queue using a stack. The operation allowed are:

1. Push and pop elements from the stack
2. Pop (Or Dequeue) from the given Queue.
3. Push (Or Enqueue) in the another Queue.

**Examples :**

Input : Queue[] = { 5, 1, 2, 3, 4 } 

Output : Yes 

Pop the first element of the given Queue 

i.e 5. Push 5 into the stack. 

Now, pop all the elements of the given Queue and push them to second Queue. 

Now, pop element 5 in the stack and push it to the second Queue.

Input : Queue[] = { 5, 1, 2, 6, 3, 4 } 

Output : No 

Push 5 to stack. 

Pop 1, 2 from given Queue and push it to another Queue. 

Pop 6 from given Queue and push to stack. 

Pop 3, 4 from given Queue and push to second Queue. 

Now, from using any of above operation, we cannot push 5 into the second Queue because it is below the 6 in the stack.

ans-:
import java.util.LinkedList;
import java.util.Queue;
import java.util.Stack;

public class ArrangeQueueInIncreasingOrder {
    public static String checkArrangement(Queue<Integer> queue) {
        Stack<Integer> stack = new Stack<>();
        Queue<Integer> secondQueue = new LinkedList<>();

        while (!queue.isEmpty()) {
            int frontQueue = queue.peek();

            if (!stack.isEmpty() && stack.peek() == frontQueue) {
                stack.pop();
                queue.poll();
            } else {
                secondQueue.offer(queue.poll());
            }

            while (!stack.isEmpty() && stack.peek() == secondQueue.peek()) {
                stack.pop();
                secondQueue.poll();
            }
        }

        if (stack.isEmpty() && secondQueue.isEmpty()) {
            return "Yes";
        } else {
            return "No";
        }
    }

    public static void main(String[] args) {
        Queue<Integer> queue1 = new LinkedList<>();
        queue1.offer(5);
        queue1.offer(1);
        queue1.offer(2);
        queue1.offer(3);
        queue1.offer(4);
        System.out.println(checkArrangement(queue1));  // Output: Yes

        Queue<Integer> queue2 = new LinkedList<>();
        queue2.offer(5);
        queue2.offer(1);
        queue2.offer(2);
        queue2.offer(6);
        queue2.offer(3);
        queue2.offer(4);
        System.out.println(checkArrangement(queue2));  // Output: No
    }
}
5.Given a number , write a program to reverse this number using stack.

Input : 365
Output : 563

Input : 6899
Output : 9986

ans-:
import java.util.Stack;

public class ReverseNumberUsingStack {
    public static int reverseNumber(int num) {
        String numStr = String.valueOf(num);
        Stack<Character> stack = new Stack<>();

        for (char c : numStr.toCharArray()) {
            stack.push(c);
        }

        StringBuilder reversedStr = new StringBuilder();

        while (!stack.isEmpty()) {
            reversedStr.append(stack.pop());
        }

        return Integer.parseInt(reversedStr.toString());
    }

    public static void main(String[] args) {
        int num1 = 365;
        System.out.println("Original number: " + num1);
        int reversedNum1 = reverseNumber(num1);
        System.out.println("Reversed number: " + reversedNum1);

        int num2 = 6899;
        System.out.println("Original number: " + num2);
        int reversedNum2 = reverseNumber(num2);
        System.out.println("Reversed number: " + reversedNum2);
    }
}

5.Given an integer k and a **[queue](https://www.geeksforgeeks.org/queue-data-structure/)** of integers, The task is to reverse the order of the first **k** elements of the queue, leaving the other elements in the same relative order.

Only following standard operations are allowed on queue.

- **enqueue(x) :** Add an item x to rear of queue
- **dequeue() :** Remove an item from front of queue
- **size() :** Returns number of elements in queue.
- **front() :** Finds front item.

ans-:
import java.util.LinkedList;
import java.util.Queue;
import java.util.Stack;

public class ReverseFirstKElements {
    public static Queue<Integer> reverseKElements(Queue<Integer> queue, int k) {
        if (queue.isEmpty() || k <= 0 || k > queue.size()) {
            return queue;
        }

        Stack<Integer> stack = new Stack<>();
        Queue<Integer> tempQueue = new LinkedList<>();

        // Step 1: Dequeue and push the first k elements onto the stack
        for (int i = 0; i < k; i++) {
            stack.push(queue.poll());
        }

        // Step 2: Enqueue the remaining elements into the temporary queue
        while (!queue.isEmpty()) {
            tempQueue.offer(queue.poll());
        }

        // Step 3: Enqueue the elements from the stack back into the given queue
        while (!stack.isEmpty()) {
            queue.offer(stack.pop());
        }

        // Step 4: Enqueue the elements from the temporary queue back into the given queue
        while (!tempQueue.isEmpty()) {
            queue.offer(tempQueue.poll());
        }

        return queue;
    }

    public static void main(String[] args) {
        Queue<Integer> queue1 = new LinkedList<>();
        queue1.offer(1);
        queue1.offer(2);
        queue1.offer(3);
        queue1.offer(4);
        queue1.offer(5);
        System.out.println("Original Queue: " + queue1);
        Queue<Integer> reversedQueue1 = reverseKElements(queue1, 3);
        System.out.println("Reversed Queue: " + reversedQueue1);

        Queue<Integer> queue2 = new LinkedList<>();
        queue2.offer(7);
        queue2.offer(8);
        queue2.offer(9);
        queue2.offer(10);
        System.out.println("Original Queue: " + queue2);
        Queue<Integer> reversedQueue2 = reverseKElements(queue2, 2);
        System.out.println("Reversed Queue: " + reversedQueue2);
    }
}
7.Given a sequence of n strings, the task is to check if any two similar words come together and then destroy each other then print the number of words left in the sequence after this pairwise destruction.

**Examples:**

Input : ab aa aa bcd ab

Output : 3

*As aa, aa destroys each other so,*

*ab bcd ab is the new sequence.*

Input :  tom jerry jerry tom

Output : 0

*As first both jerry will destroy each other.*

*Then sequence will be tom, tom they will also destroy*

*each other. So, the final sequence doesn’t contain any*

*word.*

ans-:
import java.util.Stack;

public class WordPairwiseDestruction {
    public static int countWordsLeft(String[] sequence) {
        Stack<String> stack = new Stack<>();

        for (String word : sequence) {
            if (stack.isEmpty() || !word.equals(stack.peek())) {
                stack.push(word);
            } else {
                stack.pop();
            }
        }

        return stack.size();
    }

    public static void main(String[] args) {
        String[] sequence1 = {"ab", "aa", "aa", "bcd", "ab"};
        System.out.println(countWordsLeft(sequence1));  // Output: 3

        String[] sequence2 = {"tom", "jerry", "jerry", "tom"};
        System.out.println(countWordsLeft(sequence2));  // Output: 0
    }
}
8.Given an array of integers, the task is to find the maximum absolute difference between the nearest left and the right smaller element of every element in the array.

**Note:** If there is no smaller element on right side or left side of any element then we take zero as the smaller element. For example for the leftmost element, the nearest smaller element on the left side is considered as 0. Similarly, for rightmost elements, the smaller element on the right side is considered as 0.

Input : arr[] = {2, 1, 8}
Output : 1
Left smaller  LS[] {0, 0, 1}
Right smaller RS[] {1, 0, 0}
Maximum Diff of abs(LS[i] - RS[i]) = 1

Input  : arr[] = {2, 4, 8, 7, 7, 9, 3}
Output : 4
Left smaller   LS[] = {0, 2, 4, 4, 4, 7, 2}
Right smaller  RS[] = {0, 3, 7, 3, 3, 3, 0}
Maximum Diff of abs(LS[i] - RS[i]) = 7 - 3 = 4

Input : arr[] = {5, 1, 9, 2, 5, 1, 7}
Output : 1

ans-:
import java.util.Stack;

public class MaxAbsoluteDifference {
    public static int maxDifference(int[] arr) {
        int n = arr.length;
        int[] leftSmaller = new int[n];
        int[] rightSmaller = new int[n];
        Stack<Integer> stack = new Stack<>();

        // Calculate the NSE on the left side
        for (int i = 0; i < n; i++) {
            while (!stack.isEmpty() && arr[i] < arr[stack.peek()]) {
                leftSmaller[stack.pop()] = arr[i];
            }
            stack.push(i);
        }

        // Clear the stack
        stack.clear();

        // Calculate the NSE on the right side
        for (int i = n - 1; i >= 0; i--) {
            while (!stack.isEmpty() && arr[i] <= arr[stack.peek()]) {
                rightSmaller[stack.pop()] = arr[i];
            }
            stack.push(i);
        }

        int maxDiff = Integer.MIN_VALUE;

        // Calculate the maximum absolute difference
        for (int i = 0; i < n; i++) {
            int diff = Math.abs(leftSmaller[i] - rightSmaller[i]);
            maxDiff = Math.max(maxDiff, diff);
        }

        return maxDiff;
    }

    public static void main(String[] args) {
        int[] arr1 = {2, 1, 8};
        System.out.println("Maximum Absolute Difference: " + maxDifference(arr1));  // Output: 1

        int[] arr2 = {2, 4, 8, 7, 7, 9, 3};
        System.out.println("Maximum Absolute Difference: " + maxDifference(arr2));  // Output: 4

        int[] arr3 = {5, 1, 9, 2, 5, 1, 7};
        System.out.println("Maximum Absolute Difference: " + maxDifference(arr3));  // Output: 1
    }
}








